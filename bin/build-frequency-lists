#!/usr/bin/env php
<?php
/**
 * Generates frequency-lists.php from frequency info in data directory
 */

ini_set('memory_limit', '1G');


function isRareAndShort($token, $rank)
{
    return $rank >= 10 ** strlen($token);
}

function hasCommaOrDoubleQuote($token, $rank, $lstName)
{
    return (bool)preg_match('/[",]/', $token);
}


// array key and number of words to collect; null means include all
$dictionaries = [
    'us_tv_and_film' => 30000,
    'english_wikipedia' => 30000,
    'passwords' => 30000,
    'surnames' => 10000,
    'male_names' => null,
    'female_names' => null,
];

$dataDir = __DIR__ . '/../data/';
$outputFile = __DIR__ . '/../Matcher/DataProvider/FrequencyLists.php';

$freqLists = [];

foreach (glob($dataDir . '/*.txt') as $filePath) {
    $fileName = pathinfo($filePath, PATHINFO_FILENAME);
    if (!array_key_exists($fileName, $dictionaries)) {
        printf(
            'Warning: %s appears in %s directory but not in dictionary settings. Excluding.' . PHP_EOL,
            $fileName,
            $dataDir
        );
    }

    $tokenToRank = [];
    $file = fopen($filePath, 'r');

    $rank = 1;
    while (($line = fgets($file)) !== false) {
        $token = explode(' ', $line)[0];
        $tokenToRank[$token] = $rank;
        $rank++;
    }

    $freqLists[$fileName] = $tokenToRank;

    fclose($file);
}

foreach ($dictionaries as $freqListName => $freqListData) {
    if (!array_key_exists($freqListName, $freqLists)) {
        printf(
            'Warning: %s appears in DICTIONARY settings but not in %s directory. Excluding.' . PHP_EOL,
            $freqListName,
            $dataDir
        );
    }
}

$filteredTokenAndRank = [];
$tokenCount = [];

foreach (array_keys($freqLists) as $name) {
    $filteredTokenAndRank[$name] = [];
    $tokenCount[$name] = 0;
}

$minimumRank = [];
$minimumName = [];

foreach ($freqLists as $name => $tokenToRank) {
    foreach ($tokenToRank as $token => $rank) {
        if (!array_key_exists($token, $minimumRank)) {
            assert(!array_key_exists($token, $minimumName));

            $minimumRank[$token] = $rank;
            $minimumName[$token] = $name;
        } else {
            assert(array_key_exists($token, $minimumName));
            assert($minimumName[$token] !== $name, printf('same token occurs multiple times in %s' . PHP_EOL, $name));

            $minRank = $minimumRank[$token];
            if ($rank < $minRank) {
                $minimumRank[$token] = $rank;
                $minimumName[$token] = $name;
            }
        }
    }
}

foreach ($freqLists as $name => $tokenToRank) {
    foreach ($tokenToRank as $token => $rank) {
        if ($minimumName[$token] !== $name) {
            continue;
        }
        if (isRareAndShort($token, $rank) or hasCommaOrDoubleQuote($token, $rank, $name)) {
            continue;
        }

        array_push($filteredTokenAndRank[$name], [$token, $rank]);
        $tokenCount[$name] += 1;
    }
}

$result = [];
foreach ($filteredTokenAndRank as $name => $tokenRankPairs) {
    sort($tokenRankPairs);
    $cutoffLimit = $dictionaries[$name];
    if ($cutoffLimit and count($tokenRankPairs) > $cutoffLimit) {
        $tokenRankPairs = array_slice($tokenRankPairs, 0, $cutoffLimit);
    }
    $result[$name] = $tokenRankPairs;
}

$freqLists = $result;

$outputFile = fopen(__DIR__ . '/../src/Matcher/DataProvider/FrequencyLists.php', 'w');
fwrite(
    $outputFile,
    '<?php
/**
 * Generated by bin/build-frequency-lists
 */
 
namespace ZxcvbnPhp\\Matcher\\DataProvider;

class FrequencyLists implements DataProviderInterface
{
    public function getData() {
        return ' . var_export($freqLists, true) . ';    
    }
}
'
);
